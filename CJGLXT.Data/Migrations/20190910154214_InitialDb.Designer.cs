// <auto-generated />
using System;
using CJGLXT.Data.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CJGLXT.Data.Migrations
{
    [DbContext(typeof(SqlServerDb))]
    [Migration("20190910154214_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CJGLXT.Data.Data.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CJGLXT.Data.Data.CourseRecord", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<int>("CourseId");

                    b.Property<int?>("Score");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRecords");
                });

            modelBuilder.Entity("CJGLXT.Data.Data.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("Sex")
                        .IsRequired();

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CJGLXT.Data.Data.StudentEvaluation", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<string>("TeacherId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentEvaluations");
                });

            modelBuilder.Entity("CJGLXT.Data.Data.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<string>("Sex")
                        .IsRequired();

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CJGLXT.Data.Data.TeacherEvaluation", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<string>("TeacherId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherEvaluations");
                });

            modelBuilder.Entity("CJGLXT.Data.Data.CourseRecord", b =>
                {
                    b.HasOne("CJGLXT.Data.Data.Course", "Course")
                        .WithMany("CourseRecords")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CJGLXT.Data.Data.Student", "Student")
                        .WithMany("CourseRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CJGLXT.Data.Data.StudentEvaluation", b =>
                {
                    b.HasOne("CJGLXT.Data.Data.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CJGLXT.Data.Data.Teacher", "Teacher")
                        .WithMany("StudentEvaluations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CJGLXT.Data.Data.TeacherEvaluation", b =>
                {
                    b.HasOne("CJGLXT.Data.Data.Student", "Student")
                        .WithMany("TeacherEvaluations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CJGLXT.Data.Data.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
